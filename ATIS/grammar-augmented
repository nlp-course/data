S -> NPFLIGHT                         : first
        | PREIGNORE NPFLIGHT              : second
        | NPFLIGHT POSTIGNORE             : first
        | PREIGNORE NPFLIGHT POSTIGNORE   : second

NPFLIGHT -> DET NOMFLIGHT             : second
        | NOMFLIGHT                   : first

NOMFLIGHT -> NFLIGHT                  : first
        | ADJ NOMFLIGHT               : concat

NFLIGHT -> FLIGHT                     : first
        | NFLIGHT PPFLIGHT            : concat

PPFLIGHT -> PPAIRLINE                 : first
        | PPDATE
        | PPTIME
        | PPPLACE 
        | PPOTHER

FLIGHT -> 'flights'                   : constant('flight')
    | 'flight' 
    | 'to' 'fly'

ADJ -> AIRLINE                        : first
        | WEEKDAY 
        | FLIGHTTYPE 
        | ADJTIME
        | PRICE
    | CLASS
        | PROPERTY

DET -> 'all' 'the'                    : ignore
        | 'all' 
        | 'a' 
        | 'an' 
        | 'the' 
        | 'any' 
        | 'all' 'of' 'the'
        | 'this'
        | 'this' 'coming'
        | 'next'
        | WEEKDAY POSS

POSS -> "'s"

CONJ -> 'and'
        | 'or'

#### FLIGHT PROPERTIES ####

PPAIRLINE -> PAIRLINE AIRLINE         : second

PAIRLINE -> 'on'                      : ignore
        | 'using' 
        | 'of' 
        | 'with'

AIRLINE -> AIRBRAND                   : first
        | AIRBRAND AIRBRANDTYPE

AIRBRAND -> 'continental'             : first_term
        | 'american' 
        | 'united' 
        | 'northwest' 
        | 'us'
        | 'delta' 
        | 'twa' 
        | 'air' 'canada' 
        | 'midwest' 'express' 
        | 'trans' 'world'

AIRBRANDTYPE -> 'airline'             : ignore
        | 'airlines'
        | 'air'

FLIGHTTYPE -> FLIGHTTYPESIMPLE              : first
        | FLIGHTTYPESIMPLE CONJ FLIGHTTYPE  : lambda X, Y, Z: X + Z

FLIGHTTYPESIMPLE -> 'round' 'trip'    : constant('roundtrip')
        | 'round-trip' 
        | 'return' 
        | 'one' 'way'                 : constant('oneway')
        | 'nonstop'                   : first_term
        | 'direct' 
        | 'connecting'

PPOTHER -> PRICE                      : first
        | CLASS
        | PPFOOD

PRICE -> 'less' 'than' AMOUNT 'dollars'   : constant('cheaper')

    | 'cheapest'                      : constant('cheap')
        | 'lowest' 'cost'
        | 'least' 'expensive' 
        | 'with' 'the' 'lowest' 'fare' 
        | 'the' 'cheapest' 'way' 'possible' 
    | 'inexpensive'
    | 'cheap'

    | 'highest' 'cost'                : constant('expensive')
        | 'most' 'expensive'
        | 'with' 'the' 'highest' 'fare' 
    | 'expensive'

AMOUNT -> '1100' | '466'              : first_term

CLASS -> 'economy'                    : constant('economy')
        | 'thrift' 'economy' 
    | 'first' 'class'                 : first_term
    | 'transcontinental'
        | 'available' 
        | 'possible' 

PPFOOD -> PFOOD FOOD                  : second

FOOD -> 'dinner'                      : first_term
        | 'lunch' 
        | 'breakfast'
        | 'a' 'meal' 

PFOOD -> 'serving'                    : ignore
        | 'with'

PROPERTY -> 'daily'                   : first_term
        | 'last' 
        | 'first' 

#### DATES ####

PPDATE -> PDATEFROM NPDATE            : lambda P, Date: f'{P}:{Date}'
        | PDATETO NPDATE
        | NPDATE                      : lambda Date: f'departing:{Date}'

PDATEFROM -> 'on'                     : constant('departing')
        | 'returning' 'on' 
        | 'of' 
        | 'for' 
        | 'next' 
        | 'the' 'next' 
        | 'in' 'the' 'next' 
        | 'of' 'next' 
        | 'leaving'
    | 'departing'
    | 'departing' 'on'
        | 'which' 'leave' 
        | 'leaving' 'on' 

PDATETO -> 'arriving'                 : constant('arriving')
        | 'arriving' 'on' 
        | 'that' 'arrive' 'on' 
        | 'which' 'arrive' 'on' 
        | 'a' 'week' 'from'

DATE -> MONTH DAY YEAR                : lambda M, D, Y: f'{M}/{D}/{Y}'
        | MONTH DAY                   : lambda M, D: f'{M}/{D}/1992'
        | 'the' DAY                   : lambda D: f'4/{D}/1992'
        | MONTH DAY 'or' DAY          : ignore
        | 'the' DAY 'or' DAY 
        | 'either' MONTH DAY 'or' DAY 
        | 'either' 'the' DAY 'or' 'the' DAY 
        | 'the' DAY 'of' MONTH 
        | DAY 'of' MONTH 
        | 'either' 'the' DAY 'or' 'the' DAY 'of' MONTH 
        | 'the' DAY 'of' MONTH 'or' 'the' 'day' 'of' MONTH 
        | 'either' 'the' DAY 'of' MONTH 'or' 'the' DAY 'of' MONTH
        
NPDATE -> WEEKDAY                     : first
        | 'a' WEEKDAY
        | 'this' WEEKDAY
        | 'this' 'coming'
        | WEEKDAY ADJTIME             : lambda Day, Time: f'and({Day})({Time})'
        | DATE                        : first
        | 'saturdays'                 : lambda terms: terms[0][:-1]
        | 'sundays' 
        | 'mondays' 
        | 'tuesdays' 
        | 'wednesdays' 
        | 'thursdays' 
        | 'fridays'
        | 'day'                       : ignore
        | 'week' 
        | 'today' 
        | 'tomorrow' 
        | 'the' 'day' 'after' 'tomorrow'
        | 'weekdays'

ADJDATE -> WEEKDAY                    : first

WEEKDAY -> 'saturday'                 : first_term
        | 'sunday' 
        | 'monday' 
        | 'tuesday' 
        | 'wednesday' 
        | 'thursday' 
        | 'friday'
        | 'weekday'
        
MONTH -> 'january'                    : first_term
        | 'february' 
        | 'march' 
        | 'april' 
        | 'may' 
        | 'june' 
        | 'july' 
        | 'august' 
        | 'september' 
        | 'october' 
        | 'november' 
        | 'december'
        
DAY -> 'first'                        : constant('1')
        | 'second'                    : constant('2')
        | 'third'                     : constant('3')
        | 'fourth'                    : constant('4')
        | 'fifth'                     : constant('5')
        | 'sixth'                     : constant('6')
        | 'seventh'                   : constant('7')
        | 'eighth'                    : constant('8')
        | 'ninth'                     : constant('9')
        | 'tenth'                     : constant('10')
        | 'eleventh'                  : constant('11')
        | 'twelfth'                   : constant('12')
        | 'thirteenth'                : constant('13')
        | 'fourteenth'                : constant('14')
        | 'fifteenth'                 : constant('15')
        | 'sixteenth'                 : constant('16')
        | 'seventeenth'               : constant('17')
        | 'eighteenth'                : constant('18')
        | 'nineteenth'                : constant('19')
        | 'twentieth'                 : constant('20')
        | 'twenty-first'              : constant('21')
        | 'twenty' 'first'            : constant('21')
        | 'twenty-second'             : constant('22')
        | 'twenty' 'second'           : constant('22')
        | 'twenty-third'              : constant('23')
        | 'twenty' 'third'            : constant('23')
        | 'twenty-fourth'             : constant('24')
        | 'twenty' 'fourth'           : constant('24')
        | 'twenty-fifth'              : constant('25')
        | 'twenty' 'fifth'            : constant('25')
        | 'twenty-sixth'              : constant('26')
        | 'twenty' 'sixth'            : constant('26')
        | 'twenty-seventh'            : constant('27')
        | 'twenty' 'seventh'          : constant('27')
        | 'twenty-eighth'             : constant('28')
        | 'twenty' 'eighth'           : constant('28')
        | 'twenty-ninth'              : constant('29')
        | 'twenty' 'ninth'            : constant('29')
        | 'thirtieth'                 : constant('30')
        | 'thirty-first'              : constant('31')
        | 'thirty' 'first'            : constant('31')
        | 'one'                       : constant('1')
        | 'two'                       : constant('2')
        | 'three'                     : constant('3')
        | 'four'                      : constant('4')
        | 'five'                      : constant('5')
        | 'six'                       : constant('6')
        | 'seven'                     : constant('7')
        | 'eight'                     : constant('8')
        | 'nine'                      : constant('9')
        | 'ten'                       : constant('10')
        | 'eleven'                    : constant('11')
        | 'twelve'                    : constant('12')
        | 'thirteen'                  : constant('13')
        | 'fourteen'                  : constant('14')
        | 'fifteen'                   : constant('15')
        | 'sixteen'                   : constant('16')
        | 'seventeen'                 : constant('17')
        | 'eighteen'                  : constant('18')
        | 'nineteen'                  : constant('19')
        | 'twenty'                    : constant('20')
        | 'twenty' 'one'              : constant('21')
        | 'twenty' 'two'              : constant('22')
        | 'twenty' 'three'            : constant('23')
        | 'twenty' 'four'             : constant('24')
        | 'twenty' 'five'             : constant('25')
        | 'twenty' 'six'              : constant('26')
        | 'twenty' 'seven'            : constant('27')
        | 'twenty' 'eight'            : constant('28')
        | 'twenty' 'nine'             : constant('29')
        | 'thirty'                    : constant('30')
        | 'thirty' 'one'              : constant('31')

YEAR -> '1991'                        : first_term
        | '1992'


#### TIMES ####

PPTIME -> PTIME NPTIME                : lambda Mod, Time: f'{Mod}({Time})'

PTIME -> 'that' 'arrive' 'before'     : constant('before')
        | 'that' 'arrives' 'before' 
        | 'arriving' 'before' 
        | 'arrival' 'by' 
        | 'arrives' 
        | 'before'
        | 'departing' 'before' 
        | 'that' 'leaves' 'before' 
        | 'which' 'arrive' 'before' 
        | 'by' 
    
        | 'around'                    : constant('at')
        | 'that' 'return' 'around' 
        | 'that' 'gets' 'in' 'around' 
        | 'at' 
        | 'arriving' 'around' 
        | 'arriving' 'about' 
        | 'that' 'arrive' 'soon' 'after' 
        | 'leaving' 'at' 
        | 'leaving' 
        | 'in' 
        | 'departing' 'in' 
        | 'on' 
        | 'that' 'leaves' 'in'

        | 'which' 'leave' 'after'     : constant('after')
        | 'leaving' 'after' 
        | 'after' 
        | 'departing' 'after' 
        | 'that' 'depart' 'after' 
        | 'departing' 'at' 
        | 'arriving' 'after' 

NPTIME -> SIMPLETIME                  : first
        | 'afternoons'                : constant('afternoon')
        | 'the' 'afternoon'
        | 'the' 'late' 'afternoon' 
        | 'evenings'                  : constant('evening')
        | 'the' 'evening'
        | 'mornings'                  : constant('morning')
        | 'the' 'morning'
        | 'the' 'early' 'am' 
        | 'as' 'early' 'as' 'possible' 
        | 'earliest' 'possible' 'time' 
        | 'the' 'day'                 : constant('daytime')
        | 'as' 'soon' 'thereafter' 'as' 'possible' 
        | UNK


ADJTIME -> 'lunch' 'time'             : constant('noon')
        | 'evening'                   : constant('evening')
        | 'dinnertime'
        | 'late' 
        | 'night'                     : constant('night')
        | 'latest' 'possible' 
        | 'latest'
        | 'tonight' 
        | 'morning'                   : constant('morning')
        | 'early' 
        | 'earliest' 'possible' 
        | 'earliest' 
        | 'afternoon'                 : constant('afternoon')
        | SIMPLETIME                  : first

SIMPLETIME -> 'one' | '1'             : constant('100')
        | 'two' | '2'                 : constant('200')
        | 'three' | '3'               : constant('300')
        | 'four' | '4'                : constant('400')
        | 'five' | '5'                : constant('500')
        | 'six' | '6'                 : constant('600')
        | 'seven' | '7'               : constant('700')
        | 'eight' | '8'               : constant('800')
        | 'nine' | '9'                : constant('900')
        | 'ten' | '10'                : constant('1000')
        | 'eleven' | '11'             : constant('1100')
        | 'twelve' | '12'             : constant('1200')
        | SIMPLETIME TIMEMOD          : lambda Time, Mod: str(int(Time) + int(Mod))
        | '230'                       : constant('000')
        | '1505' 
        | '630am' 
        | '720am' 
        | '723pm' 
        | '819' 
        | '845' 
        | '1026' 
        | '1145am' 

TIMEMOD -> 'am'                       : constant('0')
        | 'oclock'
        | "o'clock"
        | 'noon' 
        | 'pm'                        : constant('1200')
        | 'midnight' 

#### PLACES ####

PPPLACE -> PLACE                      : first
        | PPLACE PLACE                : forward
        | PPLACE PLACE 'or' PLACE     : ignore
        | PPLACE 'either' PLACE 'or' PLACE 
        | 'either' PLACE 'or' PLACE 
        | PLACE 'or' PLACE 
        | 'between' PLACE 'and' PLACE
    
PPLACE -> PPLACETO                    : constant(lambda Place: f"arriving:{Place}")
        | PPLACEFROM                  : constant(lambda Place: f"departing:{Place}")
        | PPLACEVIA                   : constant(lambda Place: f"via:{Place}")

PPLACETO -> 'to'                      : ignore
        | 'that' 'arrive' 'at' 
        | 'that' 'arrives' 'in' 
        | 'coming' 'back' 'to' 
        | 'that' 'go' 'to' 
        | 'and' 'then' 'to' 
        | 'arriving' 'in' 
        | 'and' 'arriving' 'in' 
        | 'and' 'arrive' 'in' 
        | 'to' 'arrive' 'in' 
        | 'arrive' 'in' 
        | 'going' 'to' 
        | 'into' 
        | 'for' 
        | 'with' 'the' 'destination' 'city' 'of' 
        | 'arriving' 
        | 'goes' 'to' 
        | 'flying' 'into' 
        | 'goes' 'on' 'to' 
        | 'reaching' 
        | 'in' 
        | 'and' 'then' 
        | 'arriving' 'to'

PPLACEFROM -> 'from' 
        | 'leaving' 
        | 'return' 'from' 
        | 'leaving' 'from' 
        | 'departing' 'from' 
        | 'departing' 
        | 'go' 'from' 
        | 'going' 'from' 
        | 'back' 'from' 
        | 'that' 'goes' 'from' 
        | 'that' 'departs' 
        | 'which' 'leaves' 'from' 
        | 'which' 'leave' 
        | 'that' 'leave' 
        | 'originating' 'in' 
        | 'leave' 
        | 'out' 'of' 
        | 'leaves' 'from' 
        | 'to' 'get' 'from'

PPLACEVIA -> 'via' 
        | 'with' 'a' 'stopover' 'in' 
        | 'with' 'a' 'layover' 'in' 
        | 'with' 'a' 'stopover' 'at' 
        | 'and' 'a' 'stopover' 'in' 
        | 'stop' 'in' 
        | 'stopping' 'in' 
        | 'make' 'a' 'stop' 'in' 
        | 'with' 'a' 'stop' 'in' 
        | 'with' 'one' 'stop' 'in' 
        | 'go' 'through' 
        | 'which' 'go' 'through' 
        | 'makes' 'a' 'stopover' 'in' 
        | 'that' 'stops' 'in' 
        | 'that' 'stops' 'over' 'in' 
        | 'by' 'way' 'of' 
        | 'connecting' 'through' 
        | 'that' 'will' 'stop' 'in' 
        | 'which' 'connects' 'in' 
        | 'arriving' 'and' 'departing' 'at'

PLACE -> 'anywhere'                   : first_term
        | 'atlanta' 
        | 'austin' 
        | 'baltimore' 
        | 'boston' 
        | 'boston' 'logan' 
        | 'burbank' 
        | 'bwi' 
        | 'charlotte' 
        | 'chicago' 
        | 'cincinnati' 
        | 'cleveland' 
        | 'cleveland' 'ohio' 
        | 'columbus' 
        | 'dallas' 'fort' 'worth' 
        | 'dallas' 
        | 'denver' 
        | 'denver' 'colorado' 
        | 'detroit' 
        | 'fort' 'worth' 
        | 'general' 'mitchell' 'international'     : constant('milwaukee')
        | 'general' 'mitchell' 
        | 'houston'                   : first_term
        | 'indianapolis' 
        | 'jfk' 
        | 'kansas' 'city' 
        | 'laguardia' 'airport' 
        | 'las' 'vegas' 
        | 'long' 'beach' 
        | 'los' 'angeles' 
        | 'love' 'field' 
        | 'memphis' 
        | 'miami' 
        | 'milwaukee' 
        | 'minneapolis' 
        | 'montreal' 
        | 'montreal' 'quebec' 
        | 'montreal' 'canada' 
        | 'nashville' 
        | 'new' 'york' 'city'         : constant('jfk')  
        | 'new' 'york' 
        | 'newark'                    : first_term
        | 'newark' 'new' 'jersey' 
        | 'oakland' 
        | 'oakland' 'california' 
        | 'ontario' 
        | 'orlando' 
        | 'orlando' 'florida' 
        | 'philadelphia' 
        | 'philly'                    : constant('philadelphia')
        | 'phoenix' 
        | 'pittsburgh' 
        | 'salt' 'lake' 'city'        : constant('saltlake')
        | 'san' 'diego'               : constant('sandiego')
        | 'san' 'diego' 'california' 
        | 'san' 'francisco'           : constant('sanfrancisco')
        | 'san' 'jose'                : constant('sanjose')
        | 'seattle' 
        | 'st.' 'louis'               : constant('stlouis')
        | 'st.' 'paul'                : constant('stpaul')
        | 'st.' 'petersburg'          : constant('stpetersburg')
        | 'tacoma'                    : first_term
        | 'tacoma' 'washington' 
        | 'tampa' 
        | 'toronto' 
        | 'washington'                : constant('dc')
        | 'washington' 'dc' 
        | 'dc' 
        | 'westchester' 'county'      : first_term
        | 'various' 'cities'          : constant('anywhere')
        | UNK

#### IGNORABLE ####

PREIGNORE -> PREIGNORESYMBOL          : ignore
    | PREIGNORESYMBOL PREIGNORE
    
PREIGNORESYMBOL -> 'me' 
        | 'show' 
        | 'now' 
        | 'only' 
        | 'can' 
        | 'you' 
        | 'the' 
        | 'itinerary' 
        | 'of' 
        | 'also' 
        | 'a' 
        | 'list' 
        | 'could' 
        | 'give' 
        | 'which' 
        | 'what' 
        | 'is' 
        | "what's" 
        | 'are' 
        | 'my' 
        | 'choices' 
        | 'for' 
        | 'i' 
        | 'would' 
        | 'like' 
        | "i'd" 
        | 'to' 
        | 'see' 
        | 'have' 
        | 'make' 
        | 'book' 
        | 'find' 
        | 'information' 
        | 'on' 
        | 'know' 
        | 'some' 
        | 'hello' 
        | 'yes' 
        | 'please' 
        | 'repeat' 
        | 'do' 
        | 'have' 
        | 'there' 
        | 'need' 
        | 'hi' 
        | 'get' 
        | 'may' 
        | 'listing' 
        | 'listings' 
        | 'travel' 
        | 'arrangements' 
        | 'okay' 
        | 'want' 
        | 'tell' 
        | 'about' 
        | 'how' 
        | 'would' 
        | 'be' 
        | 'able' 
        | 'put' 
        | 'requesting' 
        | "i'm" 
        | 'looking' 
        | 'display' 
        | UNK


POSTIGNORE -> POSTIGNORESYMBOL
        | POSTIGNORESYMBOL POSTIGNORE
    
POSTIGNORESYMBOL -> 'please' 
        | 'there' 
        | 'are' 
        | 'currently' 
        | 'do' 
        | 'you' 
        | 'have' 
        | 'fares' 
        | 'information' 
        | 'i' 
        | 'want' 
        | 'would' 
        | 'like' 
        | 'the' 
        | 'flight' 
        | 'be' 
        | 'go' 
        | 'departures' 
        | 'is' 
        | 'such' 
        | 'a' 
        | 'that' 
        | 'serves' 
        | 'both' 
        | 'and' 
        | 'along' 
        | 'with' 
        | 'can' 
        | 'get' 
        | "i'd" 
        | 'traveling' 
        | 'for' 
        | 'me' 
        | UNK 
        | '.' 
        | '?'